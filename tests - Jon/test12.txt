this.draw = function() {
      	// test10
      	// Tu código aquí
      	// Pintar cuerpo de fantasma

      	var color;
      	if (this.state == Ghost.NORMAL) {
        	color = ghostcolor[this.id];
      	}
	else if (this.state == Ghost.VULNERABLE) {
        	if (thisGame.ghostTimer >= 100) {
          		color = ghostcolor[4];
        	}
		else {
          		var timer = Math.floor(thisGame.ghostTimer / 10);
          		if (timer % 2 != 0) {
            			color = ghostcolor[5];
          		}
			else {
            			color = ghostcolor[4];
          		}
       	 	}
      	}

      	this.ctx.beginPath();
      	this.ctx.moveTo(this.x + TILE_WIDTH / 8, this.y + TILE_HEIGHT / 8 * 3);
      	this.ctx.quadraticCurveTo(this.x + TILE_WIDTH / 8 * 2, this.y, this.x + TILE_WIDTH / 8 * 3, this.y + TILE_HEIGHT / 8 * 3);
      	this.ctx.quadraticCurveTo(this.x + TILE_WIDTH / 8 * 4, this.y, this.x + TILE_WIDTH / 8 * 5, this.y + TILE_HEIGHT / 8 * 3);
      	this.ctx.lineTo(this.x + player.radius * 2, this.y + player.radius * 2);
      	this.ctx.lineTo(this.x, this.y + player.radius * 2);
      	this.ctx.closePath();
      	this.ctx.strokeStyle = color;
      	this.ctx.stroke();
      	this.ctx.fillStyle = color;
      	this.ctx.fill();

      	this.ctx.beginPath();
      	this.ctx.arc(this.x + TILE_WIDTH / 8, this.y + player.radius, TILE_WIDTH / 8, 0, 2 * Math.PI);
      	this.ctx.arc(this.x + TILE_WIDTH / 8 * 3, this.y + player.radius, TILE_WIDTH / 8, 0, 2 * Math.PI);
      	this.ctx.closePath();
      	this.ctx.strokeStyle = "white";
      	this.ctx.stroke();
      	this.ctx.fillStyle = "white";
      	this.ctx.fill();

      	// test12 
      	// Tu código aquí
      	// Asegúrate de pintar el fantasma de un color u otro dependiendo del estado del fantasma y de thisGame.ghostTimer
      	// siguiendo el enunciado

      	// test10
      	// Tu código aquí
      	// Pintar ojos 

}; // draw

this.checkIfHitSomething = function(playerX, playerY, row, col) {
      	var tileID = {
        	'doorH': 20,
        	'doorV': 21,
        	'pelletPower': 3,
        	'pacman': 4,
        	'empty': 0,
        	'pellet': 2,
      	};
      	// test8
      	// Tu código aquí
      	//  Gestiona la recogida de píldoras

      	var playerX2 = playerX + thisGame.TILE_WIDTH - 1,
        	playerY2 = playerY + thisGame.TILE_HEIGHT - 1,
        	colLeft = Math.floor(playerX / thisGame.TILE_WIDTH),
        	colRight = Math.floor(playerX2 / thisGame.TILE_WIDTH),
        	rowUp = Math.floor(playerY / thisGame.TILE_HEIGHT),
        	rowDown = Math.floor(playerY2 / thisGame.TILE_HEIGHT),
        	cols = [colLeft],
        	rows = [rowUp];

      	if (colLeft != colRight) {
        	cols[1] = colRight;
      	}
      	if (rowUp != rowDown) {
        	rows[1] = rowDown;
      	}

      	for (var i = 0; i < rows.length; i++) {
        	var r = rows[i];
        	for (var j = 0; j < cols.length; j++) {
          		var c = cols[j];
          		var value = this.getMapTile(r, c);
          		if (value == tileID.pellet) {
            			this.setMapTile(r, c, 0);
            			this.pellets--;
            			if (this.pellets == 0) {
              				console.log("Next level!");
            			}
          		}
			else if (value == tileID.doorH) {
				if (c == 0) {
              				player.x = (this.lvlWidth - 2) * thisGame.TILE_WIDTH;
            			}
            			else if (c == this.lvlWidth - 1) {
              				player.x = thisGame.TILE_WIDTH;
            			}
          		}
			else if (value == tileID.doorV) {
				if (r == 0) {
              				player.y = (this.lvlHeight - 2) * thisGame.TILE_HEIGHT;
            			}
            			else if (r == this.lvlHeight - 1) {
              				player.y = thisGame.TILE_HEIGHT;
            			}
          		} else if (value == tileID.pelletPower) {
            			this.setMapTile(r, c, 0);
            			for (var i = 0; i < numGhosts; i++) {
              				ghosts[i].state = Ghost.VULNERABLE;
            			}
            			thisGame.ghostTimer = 360;
          		}
        	}
      	}

      	// test9
      	// Tu código aquí
      	// Gestiona las puertas teletransportadoras

      	// test12 
      	// Tu código aquí
      	// Gestiona la recogida de píldoras de poder
      	// (cambia el estado de los fantasmas)

};

var updateTimers = function() {
    	// test12
    	// Tu código aquí
    	// Actualizar thisGame.ghostTimer (y el estado de los fantasmas, tal y como se especifica en el enunciado)

    	if (thisGame.ghostTimer != 0) {
      		thisGame.ghostTimer--;
      		if (thisGame.ghostTimer == 0) {
        		for (var i = 0; i < numGhosts; i++) {
          			ghosts[i].state = Ghost.NORMAL;
        		}
      		}
    	}

};

var reset = function() {
    	// test12
    	// Tu código aquí
    	// probablemente necesites inicializar los atributos de los fantasmas
    	// (x,y,velX,velY,state, speed)

    	// test7
    	// Tu código aquí
    	// Inicialmente Pacman debe empezar a moverse en horizontal hacia la derecha, con una velocidad igual a su atributo speed
    	// inicializa la posición inicial de Pacman tal y como indica el enunciado

    	player.x = player.homeX;
    	player.y = player.homeY;
    	player.velX = player.speed;
    	player.velY = 0;

    	// test10
    	// Tu código aquí
    	// Inicializa los atributos x,y, velX, velY, speed de la clase Ghost de forma conveniente

    	for (var i = 0; i < numGhosts; i++) {
      		var ghost = ghosts[i];
      		ghost.x = ghost.homeX;
      		ghost.y = ghost.homeY;
      		ghost.velX = ghost.speed;
      		ghost.velY = 0;
      		ghost.speed = 1;
      		ghost.state = Ghost.NORMAL;
    	}

};