Pacman.prototype.move = function() {
	// test7
	// Tu código aquí
	//
    
    	if (this.velX != 0) {
      		if (this.x + this.velX >= 0 && this.x + this.velX <= thisGame.TILE_WIDTH * (thisLevel.lvlWidth - 1) && !thisLevel.checkIfHitWall(this.x + this.velX, this.y, this.nearestRow, this.nearestCol)) {
        		this.x = this.x + this.velX;
      		}
      		else {
        		this.velX = 0;
      		}
    	}
    	else if (this.velY != 0) {
      		if (this.y + this.velY >= 0 && this.y + this.velY <= thisGame.TILE_HEIGHT * (thisLevel.lvlHeight - 1) && !thisLevel.checkIfHitWall(this.x, this.y + this.velY, this.nearestRow, this.nearestCol)) {
        		this.y = this.y + this.velY;
      		}
      		else {
        		this.velY = 0;
      		}
    	}
    
	// tras actualizar this.x  y  this.y... 
    	// check for collisions with other tiles (pellets, etc)
	thisLevel.checkIfHitSomething(this.x, this.y, this.nearestRow, this.nearestCol);
		
	// test11
	// Tu código aquí
	// check for collisions with the ghosts
    
    	for (var i=0; i< numGhosts; i++){
      		var ghost = ghosts[i];
      		if(thisLevel.checkIfHit(this.x, this.y, ghost.x, ghost.y, TILE_WIDTH/2)) {
      			console.log("Hay choque");
        		if (ghost.state == Ghost.VULNERABLE) {
          			ghost.state = Ghost.SPECTACLES;
        		}
        		else if (ghost.state == Ghost.NORMAL) {
          			thisGame.setMode(thisGame.HIT_GHOST);
        		}
      		}
    	}

    	// test13
    	// Tu código aquí.  
    	// Si chocamos contra un fantasma y su estado es Ghost.VULNERABLE
    	// cambiar velocidad del fantasma y pasarlo a modo Ghost.SPECTACLES

	// test14 
    	// Tu código aquí. 
	// Si chocamos contra un fantasma cuando éste esta en estado Ghost.NORMAL --> cambiar el modo de juego a HIT_GHOST

};

var updateTimers = function() {
    	// test12
    	// Tu código aquí
    	// Actualizar thisGame.ghostTimer (y el estado de los fantasmas, tal y como se especifica en el enunciado)

    	if (thisGame.ghostTimer != 0) {
      		thisGame.ghostTimer--;
      		if (thisGame.ghostTimer == 0) {
        		for (var i = 0; i < numGhosts; i++) {
          			var ghost = ghosts[i];
          			if (ghost.state == Ghost.VULNERABLE) {
            				ghost.state = Ghost.NORMAL;
          			}
        		}
      		}
    	}
	    
	// test14
	// Tu código aquí
	// actualiza modeTimer...
    
    	thisGame.modeTimer++;

};

var mainLoop = function(time){
	//main function, called each frame 
	measureFPS(time);
     
	// test14
	// Tu código aquí
	// sólo en modo NORMAL
    
    	if (thisGame.mode==thisGame.NORMAL) {
      		checkInputs();

      		// test10
      		// Tu código aquí
      		// Mover fantasmas

      		for (var i=0; i< numGhosts; i++){
        		ghosts[i].move();
      		}

      		player.move();
    	}
        
	// test14
	// Tu código aquí
	// en modo HIT_GHOST
	// seguir el enunciado...
    
    	if (thisGame.mode==thisGame.HIT_GHOST && thisGame.modeTimer==90) {
    		reset();
      		thisGame.setMode(thisGame.WAIT_TO_START);
    	}
	
	// test14
	// tu código aquí
	// en modo WAIT_TO_START
	// seguir el enunciado...
    
    	if (thisGame.mode==thisGame.WAIT_TO_START && thisGame.modeTimer==30) {
      		thisGame.setMode(thisGame.NORMAL);
    	}
	    
	// Clear the canvas
	clearCanvas();
   
	thisLevel.drawMap();

	// test10
	// Tu código aquí
	// Pintar fantasmas
    
    	for (var i=0; i< numGhosts; i++){
      		ghosts[i].draw();
    	}
 
	player.draw();

	updateTimers();
	// call the animation loop every 1/60th of second
	requestAnimationFrame(mainLoop);
};