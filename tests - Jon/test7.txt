this.loadLevel = function() {
      	// test5
      	// Tu código aquí
      	// leer res/levels/1.txt y guardarlo en el atributo map	
      	// haciendo uso de setMapTile

      	var direccion = "https://raw.githubusercontent.com/AinhoY/froga/main/1.txt";
      	var level = this;
      	$.ajax({
		url: direccion,
      		success: function(result) {

          		var r2 = JSON.stringify(result);
          		var r3 = r2.replaceAll('"', "").replaceAll("#", "").replaceAll("\\n", " ").replaceAll("  ", " ").replaceAll("  ", " ").trim();
          		var r4 = r3.split(" ");

          		level.lvlWidth = r4[1];
          		level.lvlHeight = r4[3];
          		for (var row = 0; row < level.lvlHeight; row++) {
            			for (var col = 0; col < level.lvlWidth; col++) {
              				var value = r4[row * level.lvlWidth + col + 5];
              				if (value == 4) {
                				player.homeX = col*thisGame.TILE_WIDTH;
                				player.homeY = row*thisGame.TILE_HEIGHT;
              				}
              				level.setMapTile(row, col, value);
            			}
          		}

        	}
      	});

};

this.isWall = function(row, col) {
     	// test7
      	// Tu código aquí

      	var value = this.getMapTile(row, col);
      	return value >= 100 && value <= 199;

};

this.checkIfHitWall = function(possiblePlayerX, possiblePlayerY, row, col) {
      	// test7
      	// Tu código aquí
      	// Determinar si el jugador va a moverse a una fila,columna que tiene pared 
      	// Hacer uso de isWall

	var possiblePlayerCol = col;
      	var possiblePlayerRow = row;

      	var diffX = possiblePlayerX-col*thisGame.TILE_WIDTH;
      	if (diffX>0) {
      		possiblePlayerCol = col+1;
      	}
      	else if (diffX<0) {
      		possiblePlayerCol = col-1;
      	}
      
      	var diffY = possiblePlayerY-row*thisGame.TILE_HEIGHT;
      	if (diffY>0) {
      		possiblePlayerRow = row+1;
      	}
      	else if (diffY<0) {
      		possiblePlayerRow = row-1;
      	}
      
      	return this.isWall(possiblePlayerRow, possiblePlayerCol);

};

var Pacman = function() {
    	this.radius = 10;
    	this.x = 0;
    	this.y = 0;
    	this.speed = 3;
    	this.angle1 = 0.25;
    	this.angle2 = 1.75;
    	this.homeX = 0;
    	this.homeY = 0;
};

Pacman.prototype.move = function() {
    	// test7
    	// Tu código aquí
    
    	var x = player.x,
        	y = player.y,
        	speed = player.speed,
        	nearestRow = Math.floor(y/thisGame.TILE_HEIGHT),
        	nearestCol = Math.floor(x/thisGame.TILE_WIDTH);
    
    	var diffX = x/thisGame.TILE_WIDTH-nearestCol;
    	var diffY = y/thisGame.TILE_HEIGHT-nearestRow;
    
    	if (diffY!=0) {
      		if(diffY>0.5) {
        		nearestRow++;
      		}
      		else if(diffY<0.5) {
        		nearestRow--;
      		}
    	}
    	if (diffX!=0) {
      		if(diffX>0.5) {
        		nearestCol++;
      		}
      		else if(diffX<0.5) {
        		nearestCol--;
      		}
    	}

    	if (inputStates.left == true && x != 0 && !thisLevel.checkIfHitWall(x - speed, y, nearestRow, nearestCol)) {
      		x = x - speed;
    	}
    	else if (inputStates.right == true && x != w - player.radius && !thisLevel.checkIfHitWall(x + speed, y, nearestRow, nearestCol)) {
      		x = x + speed;
    	}
    	else if (inputStates.up == true && y != 0 && !thisLevel.checkIfHitWall(x, y - speed, nearestRow, nearestCol)) {
      		y = y - speed;
    	}
    	else if (inputStates.down == true && y != h - player.radius && !thisLevel.checkIfHitWall(x, y + speed, nearestRow, nearestCol)) {
      		y = y + speed;
    	}

};

var checkInputs = function() {
    	// test4
    	// Tu código aquí (reestructurado para el test7)

    	// test7
    	// Tu código aquí
    	// LEE bien el enunciado, especialmente la nota de ATENCION que
    	// se muestra tras el test 7
};

var reset = function() {
    	// test7
    	// Tu código aquí
    	// Inicialmente Pacman debe empezar a moverse en horizontal hacia la derecha, con una velocidad igual a su atributo speed
    	// inicializa la posición inicial de Pacman tal y como indica el enunciado

    	player.x = player.homeX;
    	player.y = player.homeY;

};