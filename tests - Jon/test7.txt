this.loadLevel = function(){
  	// test5
    	// Tu código aquí
	// leer res/levels/1.txt y guardarlo en el atributo map	
	// haciendo uso de setMapTile
      
     	var direccion = "https://raw.githubusercontent.com/AinhoY/froga/main/1.txt";
      	var level = this;
      	$.ajax({url:direccion,success:function(result){

        	var r2 = JSON.stringify(result);
        	var r3 = r2.split("\\n");

        	level.lvlWidth = r3[0].split(" ")[2];
        	level.lvlHeight = r3[1].split(" ")[2];
        	for (var row=0; row<level.lvlHeight; row++) {
        		var row2 = r3[row+4].trim().split(" ");
          		for (var col=0; col<level.lvlWidth; col++) {
            			var value = row2[col];
				if (value==4) {
                			player.homeX = thisGame.TILE_WIDTH*(col+0.5)-player.radius;
                			player.homeY = thisGame.TILE_HEIGHT*(row+0.5)-player.radius;
					reset();
              			}
            			level.setMapTile(row, col, value);
          		}
        	}

	}});
      
};

this.isWall = function(row, col) {
     	// test7
      	// Tu código aquí

      	var value = this.getMapTile(row, col);
      	return value >= 100 && value <= 199;

};

this.checkIfHitWall = function(possiblePlayerX, possiblePlayerY, row, col) {
      	// test7
      	// Tu código aquí
      	// Determinar si el jugador va a moverse a una fila,columna que tiene pared 
      	// Hacer uso de isWall

	var colLeft = Math.floor(possiblePlayerX/thisGame.TILE_WIDTH),
          	colRight = Math.floor((possiblePlayerX+player.radius*2)/thisGame.TILE_WIDTH),
          	rowUp = Math.floor(possiblePlayerY/thisGame.TILE_HEIGHT),
          	rowDown = Math.floor((possiblePlayerY+player.radius*2)/thisGame.TILE_HEIGHT),
          	cols = [colLeft],
          	rows = [rowUp];

      	if (colLeft!=colRight) {
        	cols[1] = colRight;
      	}
      	if (rowUp!=rowDown) {
        	rows[1] = rowDown;
      	}

      	for (var i = 0; i < rows.length; i++) {
        	var r = rows[i];
        	for (var j = 0; j < cols.length; j++) {
          		var c = cols[j];
          		if (this.isWall(r, c)) {
            			return true;
          		}
        	}
      	}

      	return false;

};

var Pacman = function() {
    	this.radius = 10;
    	this.x = 0;
    	this.y = 0;
    	this.speed = 3;
    	this.angle1 = 0.25;
    	this.angle2 = 1.75;
    	this.homeX = 0;
    	this.homeY = 0;
};

Pacman.prototype.move = function() {
    	// test7
    	// Tu código aquí
    
    	var nearestRow, nearestCol;
    
   	if (inputStates.left && this.x-this.speed>=0 && !thisLevel.checkIfHitWall(this.x-this.speed, this.y, nearestRow, nearestCol)) {
     		this.x = this.x-this.speed;
   	}
   	else if (inputStates.right && this.x+this.speed<=w-this.radius*2 && !thisLevel.checkIfHitWall(this.x+this.speed, this.y, nearestRow, nearestCol)) {
     		this.x = this.x+this.speed;
   	}
   	else if (inputStates.up && this.y-this.speed>=0 && !thisLevel.checkIfHitWall(this.x, this.y-this.speed, nearestRow, nearestCol)) {
     		this.y = this.y-this.speed;
   	}
   	else if (inputStates.down && this.y+this.speed<=h-this.radius*2 && !thisLevel.checkIfHitWall(this.x, this.y+this.speed, nearestRow, nearestCol)) {
     		this.y = this.y+this.speed;
   	}

};

var checkInputs = function() {
    	// test4
    	// Tu código aquí (reestructurado para el test7)

    	// test7
    	// Tu código aquí
    	// LEE bien el enunciado, especialmente la nota de ATENCION que
    	// se muestra tras el test 7
};

var reset = function() {
    	// test7
    	// Tu código aquí
    	// Inicialmente Pacman debe empezar a moverse en horizontal hacia la derecha, con una velocidad igual a su atributo speed
    	// inicializa la posición inicial de Pacman tal y como indica el enunciado

    	player.x = player.homeX;
    	player.y = player.homeY;

};